// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.3.2 (commit 4b41cf3d71aa85cd4e75c96cbb54324481ee0b27).

#![allow(unused, clippy::all)]
use super::server_events_type::ServerEvents;
use super::server_status_type::ServerStatus;
use super::server_type::Server;
use super::user_type::User;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `server`.
///
/// Obtain a handle from the [`ServerTableAccess::server`] method on [`super::RemoteTables`],
/// like `ctx.db.server()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.server().on_insert(...)`.
pub struct ServerTableHandle<'ctx> {
    imp: __sdk::TableHandle<Server>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `server`.
///
/// Implemented for [`super::RemoteTables`].
pub trait ServerTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`ServerTableHandle`], which mediates access to the table `server`.
    fn server(&self) -> ServerTableHandle<'_>;
}

impl ServerTableAccess for super::RemoteTables {
    fn server(&self) -> ServerTableHandle<'_> {
        ServerTableHandle {
            imp: self.imp.get_table::<Server>("server"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct ServerInsertCallbackId(__sdk::CallbackId);
pub struct ServerDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for ServerTableHandle<'ctx> {
    type Row = Server;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = Server> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = ServerInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> ServerInsertCallbackId {
        ServerInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: ServerInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = ServerDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> ServerDeleteCallbackId {
        ServerDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: ServerDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<Server>("server");
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<Server>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<Server>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}
