// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";
import { PlayerRegistration } from "./player_registration_type";
// Mark import as potentially unused
declare type __keep_PlayerRegistration = PlayerRegistration;
import { TeamRegistration } from "./team_registration_type";
// Mark import as potentially unused
declare type __keep_TeamRegistration = TeamRegistration;

import * as RegistrationVariants from './registration_variants'

// The tagged union or sum type for the algebraic type `Registration`.
export type Registration = RegistrationVariants.Players |
  RegistrationVariants.Team;

// A value with helper functions to construct the type.
export const Registration = {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  Players: (value: PlayerRegistration): Registration => ({ tag: "Players", value }),
  Team: (value: TeamRegistration): Registration => ({ tag: "Team", value }),

  getTypeScriptAlgebraicType(): __AlgebraicTypeType {
    return __AlgebraicTypeValue.Sum({
      variants: [
        { name: "Players", algebraicType: PlayerRegistration.getTypeScriptAlgebraicType() },
        { name: "Team", algebraicType: TeamRegistration.getTypeScriptAlgebraicType() },
      ]
    });
  },

  serialize(writer: __BinaryWriter, value: Registration): void {
      __AlgebraicTypeValue.serializeValue(writer, Registration.getTypeScriptAlgebraicType(), value);
  },

  deserialize(reader: __BinaryReader): Registration {
      return __AlgebraicTypeValue.deserializeValue(reader, Registration.getTypeScriptAlgebraicType());
  },

}

export default Registration;


