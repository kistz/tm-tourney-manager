// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.5.0 (commit 0712d3bfbd159367de09efeeeacb54c9d4f0ff61).

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";

// Import and reexport all reducer arg types
import { AddEvent } from "./add_event_reducer.ts";
export { AddEvent };
import { AddServer } from "./add_server_reducer.ts";
export { AddServer };
import { AddStage } from "./add_stage_reducer.ts";
export { AddStage };
import { CallServer } from "./call_server_reducer.ts";
export { CallServer };
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { CreateEventTemplate } from "./create_event_template_reducer.ts";
export { CreateEventTemplate };
import { CreateServerConfig } from "./create_server_config_reducer.ts";
export { CreateServerConfig };
import { CreateTournament } from "./create_tournament_reducer.ts";
export { CreateTournament };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { LoadServerConfig } from "./load_server_config_reducer.ts";
export { LoadServerConfig };
import { MatchAssignServer } from "./match_assign_server_reducer.ts";
export { MatchAssignServer };
import { MatchConfigured } from "./match_configured_reducer.ts";
export { MatchConfigured };
import { OnTournamentEventSchedule } from "./on_tournament_event_schedule_reducer.ts";
export { OnTournamentEventSchedule };
import { PostEvent } from "./post_event_reducer.ts";
export { PostEvent };
import { ProvisionMatch } from "./provision_match_reducer.ts";
export { ProvisionMatch };
import { RegistryAddMap } from "./registry_add_map_reducer.ts";
export { RegistryAddMap };
import { TryStart } from "./try_start_reducer.ts";
export { TryStart };
import { UpdateMatchConfig } from "./update_match_config_reducer.ts";
export { UpdateMatchConfig };

// Import and reexport all table handle types
import { EventConfigTableHandle } from "./event_config_table.ts";
export { EventConfigTableHandle };
import { EventStageTableHandle } from "./event_stage_table.ts";
export { EventStageTableHandle };
import { MapRegistryTableHandle } from "./map_registry_table.ts";
export { MapRegistryTableHandle };
import { MatchTemplateTableHandle } from "./match_template_table.ts";
export { MatchTemplateTableHandle };
import { StageMatchTableHandle } from "./stage_match_table.ts";
export { StageMatchTableHandle };
import { StageTemplateTableHandle } from "./stage_template_table.ts";
export { StageTemplateTableHandle };
import { TmMatchEventTableHandle } from "./tm_match_event_table.ts";
export { TmMatchEventTableHandle };
import { TmServerTableHandle } from "./tm_server_table.ts";
export { TmServerTableHandle };
import { TmServerConfigTableHandle } from "./tm_server_config_table.ts";
export { TmServerConfigTableHandle };
import { TournamentTableHandle } from "./tournament_table.ts";
export { TournamentTableHandle };
import { TournamentEventTableHandle } from "./tournament_event_table.ts";
export { TournamentEventTableHandle };
import { TournamentEventScheduleTableHandle } from "./tournament_event_schedule_table.ts";
export { TournamentEventScheduleTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Common } from "./common_type.ts";
export { Common };
import { Custom } from "./custom_type.ts";
export { Custom };
import { EndMapEnd } from "./end_map_end_type.ts";
export { EndMapEnd };
import { EndMapStart } from "./end_map_start_type.ts";
export { EndMapStart };
import { EndRoundEnd } from "./end_round_end_type.ts";
export { EndRoundEnd };
import { EndRoundStart } from "./end_round_start_type.ts";
export { EndRoundStart };
import { Event } from "./event_type.ts";
export { Event };
import { EventConfig } from "./event_config_type.ts";
export { EventConfig };
import { EventPhase } from "./event_phase_type.ts";
export { EventPhase };
import { EventStage } from "./event_stage_type.ts";
export { EventStage };
import { GiveUp } from "./give_up_type.ts";
export { GiveUp };
import { LoadingMapEnd } from "./loading_map_end_type.ts";
export { LoadingMapEnd };
import { LoadingMapStart } from "./loading_map_start_type.ts";
export { LoadingMapStart };
import { Map } from "./map_type.ts";
export { Map };
import { MapRegistry } from "./map_registry_type.ts";
export { MapRegistry };
import { MatchStatus } from "./match_status_type.ts";
export { MatchStatus };
import { MatchTemplate } from "./match_template_type.ts";
export { MatchTemplate };
import { Method } from "./method_type.ts";
export { Method };
import { ModeConfig } from "./mode_config_type.ts";
export { ModeConfig };
import { PlayLoopEnd } from "./play_loop_end_type.ts";
export { PlayLoopEnd };
import { PlayLoopStart } from "./play_loop_start_type.ts";
export { PlayLoopStart };
import { Player } from "./player_type.ts";
export { Player };
import { PlayerChat } from "./player_chat_type.ts";
export { PlayerChat };
import { PlayerConnect } from "./player_connect_type.ts";
export { PlayerConnect };
import { PlayerDisconnect } from "./player_disconnect_type.ts";
export { PlayerDisconnect };
import { PlaylistConfig } from "./playlist_config_type.ts";
export { PlaylistConfig };
import { Podium } from "./podium_type.ts";
export { Podium };
import { Respawn } from "./respawn_type.ts";
export { Respawn };
import { RespawnBavaviour } from "./respawn_bavaviour_type.ts";
export { RespawnBavaviour };
import { RoundTime } from "./round_time_type.ts";
export { RoundTime };
import { Rounds } from "./rounds_type.ts";
export { Rounds };
import { Scores } from "./scores_type.ts";
export { Scores };
import { ServerConfig } from "./server_config_type.ts";
export { ServerConfig };
import { StageMatch } from "./stage_match_type.ts";
export { StageMatch };
import { StageTemplate } from "./stage_template_type.ts";
export { StageTemplate };
import { StartLine } from "./start_line_type.ts";
export { StartLine };
import { StartMap } from "./start_map_type.ts";
export { StartMap };
import { StartTurn } from "./start_turn_type.ts";
export { StartTurn };
import { Team } from "./team_type.ts";
export { Team };
import { TmMatchEvent } from "./tm_match_event_type.ts";
export { TmMatchEvent };
import { TmServer } from "./tm_server_type.ts";
export { TmServer };
import { TmServerConfig } from "./tm_server_config_type.ts";
export { TmServerConfig };
import { Tournament } from "./tournament_type.ts";
export { Tournament };
import { TournamentEvent } from "./tournament_event_type.ts";
export { TournamentEvent };
import { TournamentEventSchedule } from "./tournament_event_schedule_type.ts";
export { TournamentEventSchedule };
import { TournamentStatus } from "./tournament_status_type.ts";
export { TournamentStatus };
import { UbisoftId } from "./ubisoft_id_type.ts";
export { UbisoftId };
import { UnloadingMapEnd } from "./unloading_map_end_type.ts";
export { UnloadingMapEnd };
import { UnloadingMapStart } from "./unloading_map_start_type.ts";
export { UnloadingMapStart };
import { User } from "./user_type.ts";
export { User };
import { WarmupDuration } from "./warmup_duration_type.ts";
export { WarmupDuration };
import { WayPoint } from "./way_point_type.ts";
export { WayPoint };

const REMOTE_MODULE = {
  tables: {
    event_config: {
      tableName: "event_config",
      rowType: EventConfig.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (EventConfig.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    event_stage: {
      tableName: "event_stage",
      rowType: EventStage.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (EventStage.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    map_registry: {
      tableName: "map_registry",
      rowType: MapRegistry.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (MapRegistry.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    match_template: {
      tableName: "match_template",
      rowType: MatchTemplate.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (MatchTemplate.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    stage_match: {
      tableName: "stage_match",
      rowType: StageMatch.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (StageMatch.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    stage_template: {
      tableName: "stage_template",
      rowType: StageTemplate.getTypeScriptAlgebraicType(),
    },
    tm_match_event: {
      tableName: "tm_match_event",
      rowType: TmMatchEvent.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (TmMatchEvent.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    tm_server: {
      tableName: "tm_server",
      rowType: TmServer.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (TmServer.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    tm_server_config: {
      tableName: "tm_server_config",
      rowType: TmServerConfig.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (TmServerConfig.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    tournament: {
      tableName: "tournament",
      rowType: Tournament.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (Tournament.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    tournament_event: {
      tableName: "tournament_event",
      rowType: TournamentEvent.getTypeScriptAlgebraicType(),
      primaryKey: "id",
      primaryKeyInfo: {
        colName: "id",
        colType: (TournamentEvent.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    tournament_event_schedule: {
      tableName: "tournament_event_schedule",
      rowType: TournamentEventSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: (TournamentEventSchedule.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: (User.getTypeScriptAlgebraicType() as __AlgebraicTypeVariants.Product).value.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    add_event: {
      reducerName: "add_event",
      argsType: AddEvent.getTypeScriptAlgebraicType(),
    },
    add_server: {
      reducerName: "add_server",
      argsType: AddServer.getTypeScriptAlgebraicType(),
    },
    add_stage: {
      reducerName: "add_stage",
      argsType: AddStage.getTypeScriptAlgebraicType(),
    },
    call_server: {
      reducerName: "call_server",
      argsType: CallServer.getTypeScriptAlgebraicType(),
    },
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    create_event_template: {
      reducerName: "create_event_template",
      argsType: CreateEventTemplate.getTypeScriptAlgebraicType(),
    },
    create_server_config: {
      reducerName: "create_server_config",
      argsType: CreateServerConfig.getTypeScriptAlgebraicType(),
    },
    create_tournament: {
      reducerName: "create_tournament",
      argsType: CreateTournament.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    load_server_config: {
      reducerName: "load_server_config",
      argsType: LoadServerConfig.getTypeScriptAlgebraicType(),
    },
    match_assign_server: {
      reducerName: "match_assign_server",
      argsType: MatchAssignServer.getTypeScriptAlgebraicType(),
    },
    match_configured: {
      reducerName: "match_configured",
      argsType: MatchConfigured.getTypeScriptAlgebraicType(),
    },
    on_tournament_event_schedule: {
      reducerName: "on_tournament_event_schedule",
      argsType: OnTournamentEventSchedule.getTypeScriptAlgebraicType(),
    },
    post_event: {
      reducerName: "post_event",
      argsType: PostEvent.getTypeScriptAlgebraicType(),
    },
    provision_match: {
      reducerName: "provision_match",
      argsType: ProvisionMatch.getTypeScriptAlgebraicType(),
    },
    registry_add_map: {
      reducerName: "registry_add_map",
      argsType: RegistryAddMap.getTypeScriptAlgebraicType(),
    },
    try_start: {
      reducerName: "try_start",
      argsType: TryStart.getTypeScriptAlgebraicType(),
    },
    update_match_config: {
      reducerName: "update_match_config",
      argsType: UpdateMatchConfig.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.5.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: __DbConnectionImpl, event: __Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: __DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: __DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "AddEvent", args: AddEvent }
| { name: "AddServer", args: AddServer }
| { name: "AddStage", args: AddStage }
| { name: "CallServer", args: CallServer }
| { name: "ClientConnected", args: ClientConnected }
| { name: "CreateEventTemplate", args: CreateEventTemplate }
| { name: "CreateServerConfig", args: CreateServerConfig }
| { name: "CreateTournament", args: CreateTournament }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "LoadServerConfig", args: LoadServerConfig }
| { name: "MatchAssignServer", args: MatchAssignServer }
| { name: "MatchConfigured", args: MatchConfigured }
| { name: "OnTournamentEventSchedule", args: OnTournamentEventSchedule }
| { name: "PostEvent", args: PostEvent }
| { name: "ProvisionMatch", args: ProvisionMatch }
| { name: "RegistryAddMap", args: RegistryAddMap }
| { name: "TryStart", args: TryStart }
| { name: "UpdateMatchConfig", args: UpdateMatchConfig }
;

export class RemoteReducers {
  constructor(private connection: __DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  addEvent(name: string, at: __Timestamp, to: bigint, withConfig: bigint | undefined) {
    const __args = { name, at, to, withConfig };
    let __writer = new __BinaryWriter(1024);
    AddEvent.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_event", __argsBuffer, this.setCallReducerFlags.addEventFlags);
  }

  onAddEvent(callback: (ctx: ReducerEventContext, name: string, at: __Timestamp, to: bigint, withConfig: bigint | undefined) => void) {
    this.connection.onReducer("add_event", callback);
  }

  removeOnAddEvent(callback: (ctx: ReducerEventContext, name: string, at: __Timestamp, to: bigint, withConfig: bigint | undefined) => void) {
    this.connection.offReducer("add_event", callback);
  }

  addServer(id: string) {
    const __args = { id };
    let __writer = new __BinaryWriter(1024);
    AddServer.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_server", __argsBuffer, this.setCallReducerFlags.addServerFlags);
  }

  onAddServer(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.onReducer("add_server", callback);
  }

  removeOnAddServer(callback: (ctx: ReducerEventContext, id: string) => void) {
    this.connection.offReducer("add_server", callback);
  }

  addStage(name: string, to: bigint, withConfig: bigint | undefined) {
    const __args = { name, to, withConfig };
    let __writer = new __BinaryWriter(1024);
    AddStage.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("add_stage", __argsBuffer, this.setCallReducerFlags.addStageFlags);
  }

  onAddStage(callback: (ctx: ReducerEventContext, name: string, to: bigint, withConfig: bigint | undefined) => void) {
    this.connection.onReducer("add_stage", callback);
  }

  removeOnAddStage(callback: (ctx: ReducerEventContext, name: string, to: bigint, withConfig: bigint | undefined) => void) {
    this.connection.offReducer("add_stage", callback);
  }

  callServer(id: string, method: Method) {
    const __args = { id, method };
    let __writer = new __BinaryWriter(1024);
    CallServer.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("call_server", __argsBuffer, this.setCallReducerFlags.callServerFlags);
  }

  onCallServer(callback: (ctx: ReducerEventContext, id: string, method: Method) => void) {
    this.connection.onReducer("call_server", callback);
  }

  removeOnCallServer(callback: (ctx: ReducerEventContext, id: string, method: Method) => void) {
    this.connection.offReducer("call_server", callback);
  }

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  createEventTemplate(name: string) {
    const __args = { name };
    let __writer = new __BinaryWriter(1024);
    CreateEventTemplate.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_event_template", __argsBuffer, this.setCallReducerFlags.createEventTemplateFlags);
  }

  onCreateEventTemplate(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("create_event_template", callback);
  }

  removeOnCreateEventTemplate(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("create_event_template", callback);
  }

  createServerConfig(id: string, config: ServerConfig) {
    const __args = { id, config };
    let __writer = new __BinaryWriter(1024);
    CreateServerConfig.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_server_config", __argsBuffer, this.setCallReducerFlags.createServerConfigFlags);
  }

  onCreateServerConfig(callback: (ctx: ReducerEventContext, id: string, config: ServerConfig) => void) {
    this.connection.onReducer("create_server_config", callback);
  }

  removeOnCreateServerConfig(callback: (ctx: ReducerEventContext, id: string, config: ServerConfig) => void) {
    this.connection.offReducer("create_server_config", callback);
  }

  createTournament(name: string) {
    const __args = { name };
    let __writer = new __BinaryWriter(1024);
    CreateTournament.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_tournament", __argsBuffer, this.setCallReducerFlags.createTournamentFlags);
  }

  onCreateTournament(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("create_tournament", callback);
  }

  removeOnCreateTournament(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("create_tournament", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  loadServerConfig(id: string, withConfig: bigint) {
    const __args = { id, withConfig };
    let __writer = new __BinaryWriter(1024);
    LoadServerConfig.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("load_server_config", __argsBuffer, this.setCallReducerFlags.loadServerConfigFlags);
  }

  onLoadServerConfig(callback: (ctx: ReducerEventContext, id: string, withConfig: bigint) => void) {
    this.connection.onReducer("load_server_config", callback);
  }

  removeOnLoadServerConfig(callback: (ctx: ReducerEventContext, id: string, withConfig: bigint) => void) {
    this.connection.offReducer("load_server_config", callback);
  }

  matchAssignServer(to: bigint, serverId: string) {
    const __args = { to, serverId };
    let __writer = new __BinaryWriter(1024);
    MatchAssignServer.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("match_assign_server", __argsBuffer, this.setCallReducerFlags.matchAssignServerFlags);
  }

  onMatchAssignServer(callback: (ctx: ReducerEventContext, to: bigint, serverId: string) => void) {
    this.connection.onReducer("match_assign_server", callback);
  }

  removeOnMatchAssignServer(callback: (ctx: ReducerEventContext, to: bigint, serverId: string) => void) {
    this.connection.offReducer("match_assign_server", callback);
  }

  matchConfigured(id: bigint) {
    const __args = { id };
    let __writer = new __BinaryWriter(1024);
    MatchConfigured.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("match_configured", __argsBuffer, this.setCallReducerFlags.matchConfiguredFlags);
  }

  onMatchConfigured(callback: (ctx: ReducerEventContext, id: bigint) => void) {
    this.connection.onReducer("match_configured", callback);
  }

  removeOnMatchConfigured(callback: (ctx: ReducerEventContext, id: bigint) => void) {
    this.connection.offReducer("match_configured", callback);
  }

  onTournamentEventSchedule(arg: TournamentEventSchedule) {
    const __args = { arg };
    let __writer = new __BinaryWriter(1024);
    OnTournamentEventSchedule.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("on_tournament_event_schedule", __argsBuffer, this.setCallReducerFlags.onTournamentEventScheduleFlags);
  }

  onOnTournamentEventSchedule(callback: (ctx: ReducerEventContext, arg: TournamentEventSchedule) => void) {
    this.connection.onReducer("on_tournament_event_schedule", callback);
  }

  removeOnOnTournamentEventSchedule(callback: (ctx: ReducerEventContext, arg: TournamentEventSchedule) => void) {
    this.connection.offReducer("on_tournament_event_schedule", callback);
  }

  postEvent(id: string, event: Event) {
    const __args = { id, event };
    let __writer = new __BinaryWriter(1024);
    PostEvent.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("post_event", __argsBuffer, this.setCallReducerFlags.postEventFlags);
  }

  onPostEvent(callback: (ctx: ReducerEventContext, id: string, event: Event) => void) {
    this.connection.onReducer("post_event", callback);
  }

  removeOnPostEvent(callback: (ctx: ReducerEventContext, id: string, event: Event) => void) {
    this.connection.offReducer("post_event", callback);
  }

  provisionMatch(usedBy: bigint, withConfig: bigint | undefined, autoProvisioningServer: boolean) {
    const __args = { usedBy, withConfig, autoProvisioningServer };
    let __writer = new __BinaryWriter(1024);
    ProvisionMatch.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("provision_match", __argsBuffer, this.setCallReducerFlags.provisionMatchFlags);
  }

  onProvisionMatch(callback: (ctx: ReducerEventContext, usedBy: bigint, withConfig: bigint | undefined, autoProvisioningServer: boolean) => void) {
    this.connection.onReducer("provision_match", callback);
  }

  removeOnProvisionMatch(callback: (ctx: ReducerEventContext, usedBy: bigint, withConfig: bigint | undefined, autoProvisioningServer: boolean) => void) {
    this.connection.offReducer("provision_match", callback);
  }

  registryAddMap(uploader: bigint) {
    const __args = { uploader };
    let __writer = new __BinaryWriter(1024);
    RegistryAddMap.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("registry_add_map", __argsBuffer, this.setCallReducerFlags.registryAddMapFlags);
  }

  onRegistryAddMap(callback: (ctx: ReducerEventContext, uploader: bigint) => void) {
    this.connection.onReducer("registry_add_map", callback);
  }

  removeOnRegistryAddMap(callback: (ctx: ReducerEventContext, uploader: bigint) => void) {
    this.connection.offReducer("registry_add_map", callback);
  }

  tryStart(matchId: bigint) {
    const __args = { matchId };
    let __writer = new __BinaryWriter(1024);
    TryStart.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("try_start", __argsBuffer, this.setCallReducerFlags.tryStartFlags);
  }

  onTryStart(callback: (ctx: ReducerEventContext, matchId: bigint) => void) {
    this.connection.onReducer("try_start", callback);
  }

  removeOnTryStart(callback: (ctx: ReducerEventContext, matchId: bigint) => void) {
    this.connection.offReducer("try_start", callback);
  }

  updateMatchConfig(id: bigint, config: ServerConfig) {
    const __args = { id, config };
    let __writer = new __BinaryWriter(1024);
    UpdateMatchConfig.serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_match_config", __argsBuffer, this.setCallReducerFlags.updateMatchConfigFlags);
  }

  onUpdateMatchConfig(callback: (ctx: ReducerEventContext, id: bigint, config: ServerConfig) => void) {
    this.connection.onReducer("update_match_config", callback);
  }

  removeOnUpdateMatchConfig(callback: (ctx: ReducerEventContext, id: bigint, config: ServerConfig) => void) {
    this.connection.offReducer("update_match_config", callback);
  }

}

export class SetReducerFlags {
  addEventFlags: __CallReducerFlags = 'FullUpdate';
  addEvent(flags: __CallReducerFlags) {
    this.addEventFlags = flags;
  }

  addServerFlags: __CallReducerFlags = 'FullUpdate';
  addServer(flags: __CallReducerFlags) {
    this.addServerFlags = flags;
  }

  addStageFlags: __CallReducerFlags = 'FullUpdate';
  addStage(flags: __CallReducerFlags) {
    this.addStageFlags = flags;
  }

  callServerFlags: __CallReducerFlags = 'FullUpdate';
  callServer(flags: __CallReducerFlags) {
    this.callServerFlags = flags;
  }

  createEventTemplateFlags: __CallReducerFlags = 'FullUpdate';
  createEventTemplate(flags: __CallReducerFlags) {
    this.createEventTemplateFlags = flags;
  }

  createServerConfigFlags: __CallReducerFlags = 'FullUpdate';
  createServerConfig(flags: __CallReducerFlags) {
    this.createServerConfigFlags = flags;
  }

  createTournamentFlags: __CallReducerFlags = 'FullUpdate';
  createTournament(flags: __CallReducerFlags) {
    this.createTournamentFlags = flags;
  }

  loadServerConfigFlags: __CallReducerFlags = 'FullUpdate';
  loadServerConfig(flags: __CallReducerFlags) {
    this.loadServerConfigFlags = flags;
  }

  matchAssignServerFlags: __CallReducerFlags = 'FullUpdate';
  matchAssignServer(flags: __CallReducerFlags) {
    this.matchAssignServerFlags = flags;
  }

  matchConfiguredFlags: __CallReducerFlags = 'FullUpdate';
  matchConfigured(flags: __CallReducerFlags) {
    this.matchConfiguredFlags = flags;
  }

  onTournamentEventScheduleFlags: __CallReducerFlags = 'FullUpdate';
  onTournamentEventSchedule(flags: __CallReducerFlags) {
    this.onTournamentEventScheduleFlags = flags;
  }

  postEventFlags: __CallReducerFlags = 'FullUpdate';
  postEvent(flags: __CallReducerFlags) {
    this.postEventFlags = flags;
  }

  provisionMatchFlags: __CallReducerFlags = 'FullUpdate';
  provisionMatch(flags: __CallReducerFlags) {
    this.provisionMatchFlags = flags;
  }

  registryAddMapFlags: __CallReducerFlags = 'FullUpdate';
  registryAddMap(flags: __CallReducerFlags) {
    this.registryAddMapFlags = flags;
  }

  tryStartFlags: __CallReducerFlags = 'FullUpdate';
  tryStart(flags: __CallReducerFlags) {
    this.tryStartFlags = flags;
  }

  updateMatchConfigFlags: __CallReducerFlags = 'FullUpdate';
  updateMatchConfig(flags: __CallReducerFlags) {
    this.updateMatchConfigFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: __DbConnectionImpl) {}

  get eventConfig(): EventConfigTableHandle {
    // clientCache is a private property
    return new EventConfigTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<EventConfig>(REMOTE_MODULE.tables.event_config));
  }

  get eventStage(): EventStageTableHandle {
    // clientCache is a private property
    return new EventStageTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<EventStage>(REMOTE_MODULE.tables.event_stage));
  }

  get mapRegistry(): MapRegistryTableHandle {
    // clientCache is a private property
    return new MapRegistryTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<MapRegistry>(REMOTE_MODULE.tables.map_registry));
  }

  get matchTemplate(): MatchTemplateTableHandle {
    // clientCache is a private property
    return new MatchTemplateTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<MatchTemplate>(REMOTE_MODULE.tables.match_template));
  }

  get stageMatch(): StageMatchTableHandle {
    // clientCache is a private property
    return new StageMatchTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<StageMatch>(REMOTE_MODULE.tables.stage_match));
  }

  get stageTemplate(): StageTemplateTableHandle {
    // clientCache is a private property
    return new StageTemplateTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<StageTemplate>(REMOTE_MODULE.tables.stage_template));
  }

  get tmMatchEvent(): TmMatchEventTableHandle {
    // clientCache is a private property
    return new TmMatchEventTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<TmMatchEvent>(REMOTE_MODULE.tables.tm_match_event));
  }

  get tmServer(): TmServerTableHandle {
    // clientCache is a private property
    return new TmServerTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<TmServer>(REMOTE_MODULE.tables.tm_server));
  }

  get tmServerConfig(): TmServerConfigTableHandle {
    // clientCache is a private property
    return new TmServerConfigTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<TmServerConfig>(REMOTE_MODULE.tables.tm_server_config));
  }

  get tournament(): TournamentTableHandle {
    // clientCache is a private property
    return new TournamentTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<Tournament>(REMOTE_MODULE.tables.tournament));
  }

  get tournamentEvent(): TournamentEventTableHandle {
    // clientCache is a private property
    return new TournamentEventTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<TournamentEvent>(REMOTE_MODULE.tables.tournament_event));
  }

  get tournamentEventSchedule(): TournamentEventScheduleTableHandle {
    // clientCache is a private property
    return new TournamentEventScheduleTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<TournamentEventSchedule>(REMOTE_MODULE.tables.tournament_event_schedule));
  }

  get user(): UserTableHandle {
    // clientCache is a private property
    return new UserTableHandle((this.connection as unknown as { clientCache: __ClientCache }).clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends __SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends __DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new __DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: __DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = __EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = __ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = __SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = __ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
