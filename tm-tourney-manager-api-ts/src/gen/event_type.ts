// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
} from "spacetimedb";
import { WayPoint } from "./way_point_type";
// Mark import as potentially unused
declare type __keep_WayPoint = WayPoint;
import { Respawn } from "./respawn_type";
// Mark import as potentially unused
declare type __keep_Respawn = Respawn;
import { StartLine } from "./start_line_type";
// Mark import as potentially unused
declare type __keep_StartLine = StartLine;
import { Scores } from "./scores_type";
// Mark import as potentially unused
declare type __keep_Scores = Scores;
import { GiveUp } from "./give_up_type";
// Mark import as potentially unused
declare type __keep_GiveUp = GiveUp;
import { LoadingMapStart } from "./loading_map_start_type";
// Mark import as potentially unused
declare type __keep_LoadingMapStart = LoadingMapStart;
import { LoadingMapEnd } from "./loading_map_end_type";
// Mark import as potentially unused
declare type __keep_LoadingMapEnd = LoadingMapEnd;
import { StartMap } from "./start_map_type";
// Mark import as potentially unused
declare type __keep_StartMap = StartMap;
import { EndMapStart } from "./end_map_start_type";
// Mark import as potentially unused
declare type __keep_EndMapStart = EndMapStart;
import { EndMapEnd } from "./end_map_end_type";
// Mark import as potentially unused
declare type __keep_EndMapEnd = EndMapEnd;
import { UnloadingMapStart } from "./unloading_map_start_type";
// Mark import as potentially unused
declare type __keep_UnloadingMapStart = UnloadingMapStart;
import { UnloadingMapEnd } from "./unloading_map_end_type";
// Mark import as potentially unused
declare type __keep_UnloadingMapEnd = UnloadingMapEnd;
import { PlayerConnect } from "./player_connect_type";
// Mark import as potentially unused
declare type __keep_PlayerConnect = PlayerConnect;
import { PlayerDisconnect } from "./player_disconnect_type";
// Mark import as potentially unused
declare type __keep_PlayerDisconnect = PlayerDisconnect;
import { PlayerChat } from "./player_chat_type";
// Mark import as potentially unused
declare type __keep_PlayerChat = PlayerChat;
import { StartTurn } from "./start_turn_type";
// Mark import as potentially unused
declare type __keep_StartTurn = StartTurn;
import { PlayLoopStart } from "./play_loop_start_type";
// Mark import as potentially unused
declare type __keep_PlayLoopStart = PlayLoopStart;
import { PlayLoopEnd } from "./play_loop_end_type";
// Mark import as potentially unused
declare type __keep_PlayLoopEnd = PlayLoopEnd;
import { EndRoundStart } from "./end_round_start_type";
// Mark import as potentially unused
declare type __keep_EndRoundStart = EndRoundStart;
import { EndRoundEnd } from "./end_round_end_type";
// Mark import as potentially unused
declare type __keep_EndRoundEnd = EndRoundEnd;
import { Podium } from "./podium_type";
// Mark import as potentially unused
declare type __keep_Podium = Podium;
import { Custom } from "./custom_type";
// Mark import as potentially unused
declare type __keep_Custom = Custom;

import * as EventVariants from './event_variants'

// The tagged union or sum type for the algebraic type `Event`.
export type Event = EventVariants.WayPoint |
  EventVariants.Respawn |
  EventVariants.StartLine |
  EventVariants.Scores |
  EventVariants.GiveUp |
  EventVariants.LoadingMapStart |
  EventVariants.LoadingMapEnd |
  EventVariants.StartMapStart |
  EventVariants.StartMapEnd |
  EventVariants.EndMapStart |
  EventVariants.EndMapEnd |
  EventVariants.UnloadingMapStart |
  EventVariants.UnloadingMapEnd |
  EventVariants.PlayerConenct |
  EventVariants.PlayerDisconnect |
  EventVariants.PlayerChat |
  EventVariants.StartTurnStart |
  EventVariants.StartTurnEnd |
  EventVariants.PlayLoopStart |
  EventVariants.PlayLoopEnd |
  EventVariants.EndRoundStart |
  EventVariants.EndRoundEnd |
  EventVariants.PodiumStart |
  EventVariants.PodiumEnd |
  EventVariants.Custom |
  EventVariants.Legacy;

// A value with helper functions to construct the type.
export const Event = {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  WayPoint: (value: WayPoint): Event => ({ tag: "WayPoint", value }),
  Respawn: (value: Respawn): Event => ({ tag: "Respawn", value }),
  StartLine: (value: StartLine): Event => ({ tag: "StartLine", value }),
  Scores: (value: Scores): Event => ({ tag: "Scores", value }),
  GiveUp: (value: GiveUp): Event => ({ tag: "GiveUp", value }),
  LoadingMapStart: (value: LoadingMapStart): Event => ({ tag: "LoadingMapStart", value }),
  LoadingMapEnd: (value: LoadingMapEnd): Event => ({ tag: "LoadingMapEnd", value }),
  StartMapStart: (value: StartMap): Event => ({ tag: "StartMapStart", value }),
  StartMapEnd: (value: StartMap): Event => ({ tag: "StartMapEnd", value }),
  EndMapStart: (value: EndMapStart): Event => ({ tag: "EndMapStart", value }),
  EndMapEnd: (value: EndMapEnd): Event => ({ tag: "EndMapEnd", value }),
  UnloadingMapStart: (value: UnloadingMapStart): Event => ({ tag: "UnloadingMapStart", value }),
  UnloadingMapEnd: (value: UnloadingMapEnd): Event => ({ tag: "UnloadingMapEnd", value }),
  PlayerConenct: (value: PlayerConnect): Event => ({ tag: "PlayerConenct", value }),
  PlayerDisconnect: (value: PlayerDisconnect): Event => ({ tag: "PlayerDisconnect", value }),
  PlayerChat: (value: PlayerChat): Event => ({ tag: "PlayerChat", value }),
  StartTurnStart: (value: StartTurn): Event => ({ tag: "StartTurnStart", value }),
  StartTurnEnd: (value: StartTurn): Event => ({ tag: "StartTurnEnd", value }),
  PlayLoopStart: (value: PlayLoopStart): Event => ({ tag: "PlayLoopStart", value }),
  PlayLoopEnd: (value: PlayLoopEnd): Event => ({ tag: "PlayLoopEnd", value }),
  EndRoundStart: (value: EndRoundStart): Event => ({ tag: "EndRoundStart", value }),
  EndRoundEnd: (value: EndRoundEnd): Event => ({ tag: "EndRoundEnd", value }),
  PodiumStart: (value: Podium): Event => ({ tag: "PodiumStart", value }),
  PodiumEnd: (value: Podium): Event => ({ tag: "PodiumEnd", value }),
  Custom: (value: Custom): Event => ({ tag: "Custom", value }),
  Legacy: (value: Custom): Event => ({ tag: "Legacy", value }),

  getTypeScriptAlgebraicType(): __AlgebraicTypeType {
    return __AlgebraicTypeValue.Sum({
      variants: [
        { name: "WayPoint", algebraicType: WayPoint.getTypeScriptAlgebraicType() },
        { name: "Respawn", algebraicType: Respawn.getTypeScriptAlgebraicType() },
        { name: "StartLine", algebraicType: StartLine.getTypeScriptAlgebraicType() },
        { name: "Scores", algebraicType: Scores.getTypeScriptAlgebraicType() },
        { name: "GiveUp", algebraicType: GiveUp.getTypeScriptAlgebraicType() },
        { name: "LoadingMapStart", algebraicType: LoadingMapStart.getTypeScriptAlgebraicType() },
        { name: "LoadingMapEnd", algebraicType: LoadingMapEnd.getTypeScriptAlgebraicType() },
        { name: "StartMapStart", algebraicType: StartMap.getTypeScriptAlgebraicType() },
        { name: "StartMapEnd", algebraicType: StartMap.getTypeScriptAlgebraicType() },
        { name: "EndMapStart", algebraicType: EndMapStart.getTypeScriptAlgebraicType() },
        { name: "EndMapEnd", algebraicType: EndMapEnd.getTypeScriptAlgebraicType() },
        { name: "UnloadingMapStart", algebraicType: UnloadingMapStart.getTypeScriptAlgebraicType() },
        { name: "UnloadingMapEnd", algebraicType: UnloadingMapEnd.getTypeScriptAlgebraicType() },
        { name: "PlayerConenct", algebraicType: PlayerConnect.getTypeScriptAlgebraicType() },
        { name: "PlayerDisconnect", algebraicType: PlayerDisconnect.getTypeScriptAlgebraicType() },
        { name: "PlayerChat", algebraicType: PlayerChat.getTypeScriptAlgebraicType() },
        { name: "StartTurnStart", algebraicType: StartTurn.getTypeScriptAlgebraicType() },
        { name: "StartTurnEnd", algebraicType: StartTurn.getTypeScriptAlgebraicType() },
        { name: "PlayLoopStart", algebraicType: PlayLoopStart.getTypeScriptAlgebraicType() },
        { name: "PlayLoopEnd", algebraicType: PlayLoopEnd.getTypeScriptAlgebraicType() },
        { name: "EndRoundStart", algebraicType: EndRoundStart.getTypeScriptAlgebraicType() },
        { name: "EndRoundEnd", algebraicType: EndRoundEnd.getTypeScriptAlgebraicType() },
        { name: "PodiumStart", algebraicType: Podium.getTypeScriptAlgebraicType() },
        { name: "PodiumEnd", algebraicType: Podium.getTypeScriptAlgebraicType() },
        { name: "Custom", algebraicType: Custom.getTypeScriptAlgebraicType() },
        { name: "Legacy", algebraicType: Custom.getTypeScriptAlgebraicType() },
      ]
    });
  },

  serialize(writer: __BinaryWriter, value: Event): void {
      __AlgebraicTypeValue.serializeValue(writer, Event.getTypeScriptAlgebraicType(), value);
  },

  deserialize(reader: __BinaryReader): Event {
      return __AlgebraicTypeValue.deserializeValue(reader, Event.getTypeScriptAlgebraicType());
  },

}

export default Event;


