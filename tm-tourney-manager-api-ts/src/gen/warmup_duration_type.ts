// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
import {
  AlgebraicType as __AlgebraicTypeValue,
  BinaryReader as __BinaryReader,
  BinaryWriter as __BinaryWriter,
  ClientCache as __ClientCache,
  ConnectionId as __ConnectionId,
  DbConnectionBuilder as __DbConnectionBuilder,
  DbConnectionImpl as __DbConnectionImpl,
  Identity as __Identity,
  SubscriptionBuilderImpl as __SubscriptionBuilderImpl,
  TableCache as __TableCache,
  TimeDuration as __TimeDuration,
  Timestamp as __Timestamp,
  deepEqual as __deepEqual,
  type AlgebraicType as __AlgebraicTypeType,
  type AlgebraicTypeVariants as __AlgebraicTypeVariants,
  type CallReducerFlags as __CallReducerFlags,
  type ErrorContextInterface as __ErrorContextInterface,
  type Event as __Event,
  type EventContextInterface as __EventContextInterface,
  type ReducerEventContextInterface as __ReducerEventContextInterface,
  type SubscriptionEventContextInterface as __SubscriptionEventContextInterface,
  type TableHandle as __TableHandle,
} from "spacetimedb";
import * as WarmupDurationVariants from './warmup_duration_variants'

// The tagged union or sum type for the algebraic type `WarmupDuration`.
export type WarmupDuration = WarmupDurationVariants.OneTry |
  WarmupDurationVariants.BasedOnMedal |
  WarmupDurationVariants.Seconds;

let _cached_WarmupDuration_type_value: __AlgebraicTypeType | null = null;

// A value with helper functions to construct the type.
export const WarmupDuration = {
  // Helper functions for constructing each variant of the tagged union.
  // ```
  // const foo = Foo.A(42);
  // assert!(foo.tag === "A");
  // assert!(foo.value === 42);
  // ```
  OneTry: { tag: "OneTry" } as const,
  BasedOnMedal: { tag: "BasedOnMedal" } as const,
  Seconds: (value: number): WarmupDurationVariants.Seconds => ({ tag: "Seconds", value }),

  getTypeScriptAlgebraicType(): __AlgebraicTypeType {
    if (_cached_WarmupDuration_type_value) return _cached_WarmupDuration_type_value;
    _cached_WarmupDuration_type_value = __AlgebraicTypeValue.Sum({ variants: [] });
    _cached_WarmupDuration_type_value.value.variants.push(
      { name: "OneTry", algebraicType: __AlgebraicTypeValue.Product({ elements: [] }) },
      { name: "BasedOnMedal", algebraicType: __AlgebraicTypeValue.Product({ elements: [] }) },
      { name: "Seconds", algebraicType: __AlgebraicTypeValue.U32 },
    );
    return _cached_WarmupDuration_type_value;
  },

  serialize(writer: __BinaryWriter, value: WarmupDuration): void {
      __AlgebraicTypeValue.serializeValue(writer, WarmupDuration.getTypeScriptAlgebraicType(), value);
  },

  deserialize(reader: __BinaryReader): WarmupDuration {
      return __AlgebraicTypeValue.deserializeValue(reader, WarmupDuration.getTypeScriptAlgebraicType());
  },

}

export default WarmupDuration;


